# bot.py

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from parser import run_parser
import os
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN –≤ .env")

AUTHORIZED_USERS = set()
user_data = {}

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start_handler(message: types.Message):
    chat_id = message.chat.id
    AUTHORIZED_USERS.add(chat_id)
    user_data[chat_id] = set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
    await message.answer("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω–∞—Ç—Ä–∏–µ–≤!")

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ---
async def check_new_matches(bot: Bot):
    while True:
        try:
            tasks = []

            # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å..." ---
            for chat_id in AUTHORIZED_USERS.copy():
                task = asyncio.create_task(
                    bot.send_message(chat_id, 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...')
                )
                tasks.append(task)

            await asyncio.gather(*tasks)  # –ñ–¥—ë–º, –ø–æ–∫–∞ –≤—Å–µ –ø–æ–ª—É—á–∞—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            tasks.clear()

            # --- –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ ---
            loop = asyncio.get_event_loop()
            matches = await loop.run_in_executor(None, run_parser)
            print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")

            # --- –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
            send_tasks = []
            user_has_new = {chat_id: False for chat_id in AUTHORIZED_USERS}

            for match in matches:
                asyncio.sleep(0.333)
                key = match["comment_link"]
                for chat_id in AUTHORIZED_USERS.copy():
                    if key not in user_data.get(chat_id, set()):
                        message = (
                            f"{match['text']}\n"
                            f"{match['comment_link']}\n"
                            f"–¢–µ–≥–∏: {match['tags']}"
                        )
                        send_tasks.append(
                            bot.send_message(chat_id, message)
                        )
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —ç—Ç–æ
                        user_data.setdefault(chat_id, set()).add(key)
                        user_has_new[chat_id] = True  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—ã–ª–∏ –Ω–æ–≤—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è

            # --- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ---
            if send_tasks:
                await asyncio.gather(*send_tasks)
            send_tasks.clear()

            # --- –û—Ç–ø—Ä–∞–≤–∫–∞ ‚ùå –ù–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–º, –∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª ---
            no_matches_tasks = []
            for chat_id in AUTHORIZED_USERS.copy():
                if not user_has_new.get(chat_id, True):  # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    no_matches_tasks.append(
                        bot.send_message(chat_id, '‚ùå –ù–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                    )

            # --- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ "–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π" ---
            if no_matches_tasks:
                await asyncio.gather(*no_matches_tasks)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

        await asyncio.sleep(60)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(start_handler, lambda m: m.text == "/start")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    asyncio.create_task(check_new_matches(bot))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start...")

    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())